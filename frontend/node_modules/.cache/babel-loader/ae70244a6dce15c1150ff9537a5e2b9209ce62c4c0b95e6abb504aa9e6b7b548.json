{"ast":null,"code":"import axios from 'axios';\n// API Configuration\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst API_PREFIX = '/api/v1';\n\n// Create axios instance with default configuration\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  // 30 seconds timeout\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor for logging\napiClient.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`API Request: ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${config.url}`);\n  return config;\n}, error => {\n  console.error('API Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor for error handling\napiClient.interceptors.response.use(response => {\n  console.log(`API Response: ${response.status} ${response.config.url}`);\n  return response;\n}, error => {\n  var _error$response;\n  console.error('API Response Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  return Promise.reject(error);\n});\nexport class ApiService {\n  /**\n   * Send a chat message and get LLM response\n   */\n  static async sendChatMessage(request) {\n    try {\n      const response = await apiClient.post(`${API_PREFIX}/chat`, request);\n      return response.data;\n    } catch (error) {\n      throw this.handleApiError(error);\n    }\n  }\n\n  /**\n   * Get available models\n   */\n  static async getModels() {\n    try {\n      const response = await apiClient.get(`${API_PREFIX}/models`);\n      return response.data;\n    } catch (error) {\n      throw this.handleApiError(error);\n    }\n  }\n\n  /**\n   * Get API status\n   */\n  static async getStatus() {\n    try {\n      const response = await apiClient.get(`${API_PREFIX}/status`);\n      return response.data;\n    } catch (error) {\n      throw this.handleApiError(error);\n    }\n  }\n\n  /**\n   * Check if API is healthy\n   */\n  static async healthCheck() {\n    try {\n      const response = await apiClient.get('/health');\n      return response.data;\n    } catch (error) {\n      throw this.handleApiError(error);\n    }\n  }\n\n  /**\n   * Handle API errors consistently\n   */\n  static handleApiError(error) {\n    if (error.response) {\n      // Server responded with error status\n      const apiError = error.response.data;\n      return new Error(apiError.error || `API Error: ${error.response.status}`);\n    } else if (error.request) {\n      // Request was made but no response received\n      return new Error('Network error: Unable to connect to the server');\n    } else {\n      // Something else happened\n      return new Error(`Request error: ${error.message}`);\n    }\n  }\n}","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","API_PREFIX","apiClient","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","_error$response","data","message","ApiService","sendChatMessage","post","handleApiError","getModels","get","getStatus","healthCheck","apiError","Error"],"sources":["/Users/hungyie/Downloads/llm-practice/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosResponse } from 'axios';\nimport {\n  ChatRequest,\n  ChatResponse,\n  ApiStatus,\n  ModelsResponse,\n  ApiError\n} from '../types/api';\n\n// API Configuration\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst API_PREFIX = '/api/v1';\n\n// Create axios instance with default configuration\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000, // 30 seconds timeout\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor for logging\napiClient.interceptors.request.use(\n  (config) => {\n    console.log(`API Request: ${config.method?.toUpperCase()} ${config.url}`);\n    return config;\n  },\n  (error) => {\n    console.error('API Request Error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for error handling\napiClient.interceptors.response.use(\n  (response) => {\n    console.log(`API Response: ${response.status} ${response.config.url}`);\n    return response;\n  },\n  (error) => {\n    console.error('API Response Error:', error.response?.data || error.message);\n    return Promise.reject(error);\n  }\n);\n\nexport class ApiService {\n  /**\n   * Send a chat message and get LLM response\n   */\n  static async sendChatMessage(request: ChatRequest): Promise<ChatResponse> {\n    try {\n      const response: AxiosResponse<ChatResponse> = await apiClient.post(\n        `${API_PREFIX}/chat`,\n        request\n      );\n      return response.data;\n    } catch (error: any) {\n      throw this.handleApiError(error);\n    }\n  }\n\n  /**\n   * Get available models\n   */\n  static async getModels(): Promise<ModelsResponse> {\n    try {\n      const response: AxiosResponse<ModelsResponse> = await apiClient.get(\n        `${API_PREFIX}/models`\n      );\n      return response.data;\n    } catch (error: any) {\n      throw this.handleApiError(error);\n    }\n  }\n\n  /**\n   * Get API status\n   */\n  static async getStatus(): Promise<ApiStatus> {\n    try {\n      const response: AxiosResponse<ApiStatus> = await apiClient.get(\n        `${API_PREFIX}/status`\n      );\n      return response.data;\n    } catch (error: any) {\n      throw this.handleApiError(error);\n    }\n  }\n\n  /**\n   * Check if API is healthy\n   */\n  static async healthCheck(): Promise<{ status: string; service: string }> {\n    try {\n      const response = await apiClient.get('/health');\n      return response.data;\n    } catch (error: any) {\n      throw this.handleApiError(error);\n    }\n  }\n\n  /**\n   * Handle API errors consistently\n   */\n  private static handleApiError(error: any): Error {\n    if (error.response) {\n      // Server responded with error status\n      const apiError: ApiError = error.response.data;\n      return new Error(apiError.error || `API Error: ${error.response.status}`);\n    } else if (error.request) {\n      // Request was made but no response received\n      return new Error('Network error: Unable to connect to the server');\n    } else {\n      // Something else happened\n      return new Error(`Request error: ${error.message}`);\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}